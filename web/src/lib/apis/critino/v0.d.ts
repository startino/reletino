/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Redirect To Docs */
		get: operations['redirect_to_docs__get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/environments': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List Environments */
		get: operations['list_environments_environments_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/environments/{name}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create Environment */
		post: operations['create_environment_environments__name__post'];
		/** Delete Environment */
		delete: operations['delete_environment_environments__name__delete'];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/critiques/ids': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get Critique Ids */
		get: operations['get_critique_ids_critiques_ids_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/critiques': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List Critiques */
		get: operations['list_critiques_critiques_get'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/critiques/{id}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Upsert */
		post: operations['upsert_critiques__id__post'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** GetCritiquesResult */
		GetCritiquesResult: {
			/** Data */
			data: components['schemas']['StrippedCritique'][];
			/** Count */
			count: number;
		};
		/** GetEnvironmentsResponse */
		GetEnvironmentsResponse: {
			/** Data */
			data: unknown[];
			/** Count */
			count: number;
		};
		/** HTTPValidationError */
		HTTPValidationError: {
			/** Detail */
			detail?: components['schemas']['ValidationError'][];
		};
		/** PostCritiquesBody */
		PostCritiquesBody: {
			/** Context */
			context?: string | null;
			/** Query */
			query?: string | null;
			/** Optimal */
			optimal?: string | null;
			/** Response */
			response?: string | null;
		};
		/** PostCritiquesResponse */
		PostCritiquesResponse: {
			/** Url */
			url: string;
			/** Data */
			data: Record<string, never>;
		};
		/** PostEnvironmentsBody */
		PostEnvironmentsBody: {
			/**
			 * Description
			 * @default
			 */
			description: string;
			/**
			 * Gen Key
			 * @default false
			 */
			gen_key: boolean;
		};
		/** PostEnvironmentsResponse */
		PostEnvironmentsResponse: {
			/** Data */
			data: Record<string, never>;
			/** Key */
			key: string | null;
		};
		/** StrippedCritique */
		StrippedCritique: {
			/** Context */
			context: string;
			/** Query */
			query: string;
			/** Optimal */
			optimal: string;
		};
		/** ValidationError */
		ValidationError: {
			/** Location */
			loc: (string | number)[];
			/** Message */
			msg: string;
			/** Error Type */
			type: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	redirect_to_docs__get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
		};
	};
	list_environments_environments_get: {
		parameters: {
			query: {
				team_name: string;
				parent_name?: string | null;
			};
			header: {
				'x-critino-key': string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetEnvironmentsResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	create_environment_environments__name__post: {
		parameters: {
			query: {
				team_name: string;
				parent_name?: string | null;
			};
			header: {
				'x-critino-key': string;
			};
			path: {
				name: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PostEnvironmentsBody'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PostEnvironmentsResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	delete_environment_environments__name__delete: {
		parameters: {
			query: {
				team_name: string;
				parent_name?: string | null;
			};
			header: {
				'x-critino-key': string;
			};
			path: {
				name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': unknown;
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	get_critique_ids_critiques_ids_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': string[];
				};
			};
		};
	};
	list_critiques_critiques_get: {
		parameters: {
			query: {
				team_name: string;
				environment_name: string;
				workflow_name?: string | null;
				agent_name?: string | null;
				query?: string | null;
				k?: number | null;
			};
			header: {
				'x-critino-key': string;
			};
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['GetCritiquesResult'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
	upsert_critiques__id__post: {
		parameters: {
			query: {
				team_name: string;
				environment_name: string;
				workflow_name: string;
				agent_name: string;
			};
			header: {
				'x-critino-key': string;
			};
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PostCritiquesBody'];
			};
		};
		responses: {
			/** @description Successful Response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['PostCritiquesResponse'];
				};
			};
			/** @description Validation Error */
			422: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['HTTPValidationError'];
				};
			};
		};
	};
}
